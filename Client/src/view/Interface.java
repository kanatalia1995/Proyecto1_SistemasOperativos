/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import controllers.PlayerController;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.standard.Media;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.JavaSoundAudioDevice;
import javazoom.jl.player.Player;
import model.Music;
import model.PlayList;
import org.json.simple.parser.ParseException;

/**
 *
 * @author edisson
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    boolean pause, playing = false;
    boolean playSong = true;
    String actionOnSong;
    Player currentSong;
    InputStream copySong;
//    MediaPlayer player;
//    Media pick;
    float prev_volume = -1;
    Color c_light_gray_1 = new Color(58,58,58);
    Color c_light_gray_2 = new Color(68,68,68);
    Color c_white = new Color(255,255,255);
    int WIDTH = 1000, HEIGHT = 800;
    
    public static PlayerController controller;
//    Object currentPlayList;
    private boolean scramble = true;
    private boolean next = true;
    private int currentIndex;
    private boolean again = true;
    private DefaultListModel playListModel;
    
    
    public Interface(){
        initComponents();
        this.userNameText.setText(Interface.controller.user.name);
        this.prograssBar.setIndeterminate(false); 
        this.prograssBar.setString(null);
        this.prograssBar.setValue(this.prograssBar.getMinimum());
        initPlayList();
        initSongData();
        ConfigWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_panels = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnl_panels_account = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        userNameText = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pnl_panels_myPlaylist = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        songsList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pnl_panels_allSongs = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        allSongList = new javax.swing.JList();
        Update = new javax.swing.JButton();
        cbPlayList = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        selectedSong = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        pnl_song_playing = new javax.swing.JPanel();
        btn_prev = new javax.swing.JButton();
        btn_play = new javax.swing.JButton();
        btn_next = new javax.swing.JButton();
        prg_time = new javax.swing.JProgressBar();
        btn_mute = new javax.swing.JButton();
        sld_volume = new javax.swing.JSlider();
        scrambleButton = new javax.swing.JToggleButton();
        repeatButton = new javax.swing.JToggleButton();
        pnl_song_info = new javax.swing.JPanel();
        lbl_song_artist_name = new javax.swing.JLabel();
        lbl_song_name = new javax.swing.JLabel();
        lbl_song_cover = new javax.swing.JLabel();
        prograssBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JukeOS");
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1000, 800));
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setResizable(false);

        pnl_panels.setBackground(new java.awt.Color(255, 255, 255));
        pnl_panels.setPreferredSize(new java.awt.Dimension(700, 400));

        jTabbedPane1.setBorder(null);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(500, 408));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        pnl_panels_account.setBackground(new java.awt.Color(255, 255, 255));
        pnl_panels_account.setPreferredSize(new java.awt.Dimension(500, 400));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome!");

        userNameText.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        userNameText.setText("User Name");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user.png"))); // NOI18N

        javax.swing.GroupLayout pnl_panels_accountLayout = new javax.swing.GroupLayout(pnl_panels_account);
        pnl_panels_account.setLayout(pnl_panels_accountLayout);
        pnl_panels_accountLayout.setHorizontalGroup(
            pnl_panels_accountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_panels_accountLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(397, 397, 397))
            .addGroup(pnl_panels_accountLayout.createSequentialGroup()
                .addGap(411, 411, 411)
                .addComponent(userNameText)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnl_panels_accountLayout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(332, Short.MAX_VALUE))
        );
        pnl_panels_accountLayout.setVerticalGroup(
            pnl_panels_accountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panels_accountLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(userNameText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(98, 98, 98))
        );

        jTabbedPane1.addTab("Account", null, pnl_panels_account, "Enter on your account");

        pnl_panels_myPlaylist.setBorder(null);
        pnl_panels_myPlaylist.setMaximumSize(new java.awt.Dimension(700, 900));
        pnl_panels_myPlaylist.setPreferredSize(new java.awt.Dimension(400, 400));

        jLabel4.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel4.setText("My Play Lists");

        playList.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        playList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        playList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playList.setFocusable(false);
        playList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(playList);

        songsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        songsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                songsListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(songsList);

        jButton1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jButton1.setText("New");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(254, 254, 254));
        jLabel6.setText("TITLE");

        jLabel9.setForeground(new java.awt.Color(254, 254, 254));
        jLabel9.setText("ID");

        jLabel10.setForeground(new java.awt.Color(254, 254, 254));
        jLabel10.setText("ARTIST");

        jLabel11.setForeground(new java.awt.Color(254, 254, 254));
        jLabel11.setText("⌚");

        javax.swing.GroupLayout pnl_panels_myPlaylistLayout = new javax.swing.GroupLayout(pnl_panels_myPlaylist);
        pnl_panels_myPlaylist.setLayout(pnl_panels_myPlaylistLayout);
        pnl_panels_myPlaylistLayout.setHorizontalGroup(
            pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panels_myPlaylistLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_panels_myPlaylistLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(pnl_panels_myPlaylistLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_panels_myPlaylistLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(36, 36, 36)
                .addComponent(jLabel6)
                .addGap(223, 223, 223)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(66, 66, 66))
        );
        pnl_panels_myPlaylistLayout.setVerticalGroup(
            pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panels_myPlaylistLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(2, 2, 2)
                .addGroup(pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel10)
                        .addComponent(jLabel11))
                    .addComponent(jLabel9))
                .addGap(30, 30, 30)
                .addGroup(pnl_panels_myPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("My list", pnl_panels_myPlaylist);

        pnl_panels_allSongs.setBorder(new javax.swing.border.LineBorder(java.awt.Color.lightGray, 0, true));
        pnl_panels_allSongs.setPreferredSize(new java.awt.Dimension(1000, 10));

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel1.setText("Song's list");

        allSongList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allSongListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(allSongList);

        Update.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        Update.setText("Update");
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateMouseClicked(evt);
            }
        });
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Add song to play list");

        jLabel7.setBackground(new java.awt.Color(255, 255, 240));
        jLabel7.setText("Selected song");

        selectedSong.setEditable(false);

        jLabel8.setBackground(new java.awt.Color(255, 255, 240));
        jLabel8.setText("Play List");

        jButton3.setText("Match");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnl_panels_allSongsLayout = new javax.swing.GroupLayout(pnl_panels_allSongs);
        pnl_panels_allSongs.setLayout(pnl_panels_allSongsLayout);
        pnl_panels_allSongsLayout.setHorizontalGroup(
            pnl_panels_allSongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panels_allSongsLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(Update)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnl_panels_allSongsLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(pnl_panels_allSongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_panels_allSongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(selectedSong, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel7)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addComponent(cbPlayList, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_panels_allSongsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)
                        .addGap(64, 64, 64)))
                .addGap(23, 23, 23))
        );
        pnl_panels_allSongsLayout.setVerticalGroup(
            pnl_panels_allSongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panels_allSongsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(pnl_panels_allSongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Update))
                .addGap(63, 63, 63)
                .addGroup(pnl_panels_allSongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_panels_allSongsLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPlayList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Songs", pnl_panels_allSongs);

        javax.swing.GroupLayout pnl_panelsLayout = new javax.swing.GroupLayout(pnl_panels);
        pnl_panels.setLayout(pnl_panelsLayout);
        pnl_panelsLayout.setHorizontalGroup(
            pnl_panelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panelsLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnl_panelsLayout.setVerticalGroup(
            pnl_panelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_panelsLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        pnl_song_playing.setBackground(new java.awt.Color(255, 255, 255));
        pnl_song_playing.setMaximumSize(new java.awt.Dimension(1100, 1000));
        pnl_song_playing.setPreferredSize(new java.awt.Dimension(350, 100));

        btn_prev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/previous.png"))); // NOI18N
        btn_prev.setBorderPainted(false);
        btn_prev.setContentAreaFilled(false);
        btn_prev.setFocusPainted(false);
        btn_prev.setFocusable(false);
        btn_prev.setIconTextGap(0);
        btn_prev.setMaximumSize(new java.awt.Dimension(55, 30));
        btn_prev.setMinimumSize(new java.awt.Dimension(55, 30));
        btn_prev.setPreferredSize(new java.awt.Dimension(55, 30));
        btn_prev.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/previous_focus.png"))); // NOI18N
        btn_prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_prevActionPerformed(evt);
            }
        });

        btn_play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/play.png"))); // NOI18N
        btn_play.setBorderPainted(false);
        btn_play.setContentAreaFilled(false);
        btn_play.setFocusPainted(false);
        btn_play.setFocusable(false);
        btn_play.setMaximumSize(new java.awt.Dimension(30, 30));
        btn_play.setMinimumSize(new java.awt.Dimension(30, 30));
        btn_play.setPreferredSize(new java.awt.Dimension(30, 30));
        btn_play.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_playFocusGained(evt);
            }
        });
        btn_play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_playMouseEntered(evt);
            }
        });
        btn_play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_playActionPerformed(evt);
            }
        });

        btn_next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/next.png"))); // NOI18N
        btn_next.setBorderPainted(false);
        btn_next.setContentAreaFilled(false);
        btn_next.setFocusPainted(false);
        btn_next.setFocusable(false);
        btn_next.setIconTextGap(0);
        btn_next.setMaximumSize(new java.awt.Dimension(55, 30));
        btn_next.setMinimumSize(new java.awt.Dimension(55, 30));
        btn_next.setPreferredSize(new java.awt.Dimension(55, 30));
        btn_next.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/next_focus.png"))); // NOI18N
        btn_next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_nextMouseClicked(evt);
            }
        });

        prg_time.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                prg_timeComponentShown(evt);
            }
        });

        btn_mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/volume_3.png"))); // NOI18N
        btn_mute.setBorderPainted(false);
        btn_mute.setContentAreaFilled(false);
        btn_mute.setFocusPainted(false);
        btn_mute.setFocusable(false);
        btn_mute.setMaximumSize(new java.awt.Dimension(32, 30));
        btn_mute.setMinimumSize(new java.awt.Dimension(32, 30));
        btn_mute.setPreferredSize(new java.awt.Dimension(32, 30));
        btn_mute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_muteActionPerformed(evt);
            }
        });

        sld_volume.setFont(new java.awt.Font("Ubuntu", 0, 3)); // NOI18N
        sld_volume.setMaximum(10);
        sld_volume.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sld_volumeStateChanged(evt);
            }
        });

        scrambleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/random.png"))); // NOI18N
        scrambleButton.setSelected(true);
        scrambleButton.setBorderPainted(false);
        scrambleButton.setContentAreaFilled(false);
        scrambleButton.setFocusPainted(false);
        scrambleButton.setFocusable(false);
        scrambleButton.setMaximumSize(new java.awt.Dimension(45, 30));
        scrambleButton.setMinimumSize(new java.awt.Dimension(45, 30));
        scrambleButton.setPreferredSize(new java.awt.Dimension(45, 30));
        scrambleButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/random_focus.png"))); // NOI18N
        scrambleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrambleButtonMouseClicked(evt);
            }
        });

        repeatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/repeat.png"))); // NOI18N
        repeatButton.setSelected(true);
        repeatButton.setToolTipText("Repeat");
        repeatButton.setBorderPainted(false);
        repeatButton.setContentAreaFilled(false);
        repeatButton.setFocusPainted(false);
        repeatButton.setFocusable(false);
        repeatButton.setMaximumSize(new java.awt.Dimension(45, 30));
        repeatButton.setMinimumSize(new java.awt.Dimension(45, 30));
        repeatButton.setPreferredSize(new java.awt.Dimension(45, 30));
        repeatButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/repeat_focus.png"))); // NOI18N
        repeatButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repeatButtonMouseClicked(evt);
            }
        });
        repeatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_song_playingLayout = new javax.swing.GroupLayout(pnl_song_playing);
        pnl_song_playing.setLayout(pnl_song_playingLayout);
        pnl_song_playingLayout.setHorizontalGroup(
            pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_song_playingLayout.createSequentialGroup()
                .addGroup(pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_song_playingLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(prg_time, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_song_playingLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(scrambleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btn_prev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_play, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(repeatButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(btn_mute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sld_volume, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        pnl_song_playingLayout.setVerticalGroup(
            pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_song_playingLayout.createSequentialGroup()
                .addGap(0, 31, Short.MAX_VALUE)
                .addGroup(pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btn_mute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sld_volume, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_song_playingLayout.createSequentialGroup()
                        .addGroup(pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrambleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(repeatButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnl_song_playingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_play, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_prev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(prg_time, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );

        pnl_song_info.setBackground(new java.awt.Color(255, 255, 255));
        pnl_song_info.setMaximumSize(new java.awt.Dimension(32767, 100));
        pnl_song_info.setPreferredSize(new java.awt.Dimension(350, 100));

        lbl_song_artist_name.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lbl_song_artist_name.setForeground(new java.awt.Color(100, 98, 98));
        lbl_song_artist_name.setText("                                ");

        lbl_song_name.setText("                                ");

        javax.swing.GroupLayout pnl_song_infoLayout = new javax.swing.GroupLayout(pnl_song_info);
        pnl_song_info.setLayout(pnl_song_infoLayout);
        pnl_song_infoLayout.setHorizontalGroup(
            pnl_song_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_song_infoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_song_cover, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_song_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_song_name, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_song_infoLayout.createSequentialGroup()
                        .addComponent(lbl_song_artist_name, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnl_song_infoLayout.setVerticalGroup(
            pnl_song_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_song_infoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lbl_song_name, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_song_artist_name)
                .addContainerGap(37, Short.MAX_VALUE))
            .addComponent(lbl_song_cover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        prograssBar.setIndeterminate(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_song_info, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_song_playing, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(prograssBar, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
            .addComponent(pnl_panels, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnl_panels, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prograssBar, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_song_info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnl_song_playing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetBackgroundColor(Color color){
        this.getContentPane().setBackground( color );
        pnl_panels.setBackground(color);
        pnl_panels_account.setBackground(color);
        pnl_panels_allSongs.setBackground(color);
        pnl_panels_myPlaylist.setBackground(color);
        pnl_song_info.setBackground(color);
        pnl_song_playing.setBackground(color);
    }
    
    private void ShowButtons() {
        btn_play.show();
        btn_prev.show();
        btn_next.show();
        btn_mute.show();
        scrambleButton.show();
        repeatButton.show();
        sld_volume.show();
        prg_time.show();
    }
    
    private void HideButtons() {
        btn_play.hide();
        btn_prev.hide();
        btn_next.hide();
        btn_mute.hide();
        scrambleButton.hide();
        repeatButton.hide();
        sld_volume.hide();
        prg_time.hide();
        
    }
    
    private void ConfigWindow() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
        // int width =  (int) (dimension.getWidth());                  // Center the window
        // int height = (int) (dimension.getHeight());                 // Center the window
        this.setSize(WIDTH, HEIGHT);
        // BACKGROUNDS
        SetBackgroundColor(c_white);
        
        HideButtons();
        
        lbl_song_name.setForeground(c_light_gray_1);
        lbl_song_artist_name.setForeground(c_light_gray_2);
        
    }
    private void initPlayList(){
        this.playListModel = new DefaultListModel();
        DefaultListModel listMusic = new DefaultListModel();
        ArrayList<PlayList> playListArray = Interface.controller.user.playlist;
        for (PlayList playLista : playListArray){
            this.playListModel.addElement(playLista);
        }
        this.playList.setModel(playListModel);
        this.songsList.setModel(listMusic);
    }
    
     private void initSongData()  {
        try {
            PlayList allSongsPlayList = Interface.controller.getAllMusic();
            ArrayList<Music> allSongs = allSongsPlayList.musicList;
            DefaultListModel listSongsModel = new DefaultListModel();
            for (Music music: allSongs){
                listSongsModel.addElement(music);
            }
            this.allSongList.setModel(listSongsModel);
            
            
            ArrayList<PlayList> playListUser=  Interface.controller.user.playlist;
            for(PlayList play : playListUser){
                this.cbPlayList.addItem(play);
            }
        } catch (IOException | ClassNotFoundException | ParseException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void LoadSong(){
//        JFXPanel j = new JFXPanel();
//        if (playing == true) {
//            player.dispose();
//            playing = false;
//        }
//        String name_song = new File("Brillas.mp3").toURI().toString();;
//        pick = new Media(name_song);
//        player = new MediaPlayer(pick);
//        playing = true;
        
    }
    
    
    
    
    
    private void PauseSong() {
        // player.pause();
        // btn_play.setText("▶");
        btn_play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/play.png")));
        btn_play.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/play_focus.png")));
        pause = true;
        actionOnSong= "pause";
    }
    
    private void PlaySong() {
//        player.play();
        btn_play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/pause.png")));
        btn_play.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/pause_focus.png")));
        pause = false;
        actionOnSong = "continue";
    }
    
    private void RestartSong() {
        actionOnSong = "restart";
    }
    
    private void UpdateBarTime(int progress){
        
    }
    
    public void updateProgressBar(final int j) {
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                System.out.println("Runnig by " + player.getTotalDuration());
////                UpdateBarTime(Math.round(player.getTotalDuration()/player.getCurrentTime()));
//            }
//        });            
    }
    
     private void AdjustIconVolume() {
        float value = getVolume();
        if (value == 0.0){
            btn_mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/volume_mute.png")));
        }else if (value < 0.4){
            btn_mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/volume_1.png")));
        }else if (value < 0.8){
            btn_mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/volume_2.png")));
        }else if (value <= 1){
            btn_mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/volume_3.png")));
        }else{
            btn_mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controllers/play.png")));    // if failed
        }
    }
    
     
    private void setVolume(float value) {
        // setGain(currentSong, -30f);
        // currentSong.setVolume(value);
        sld_volume.setValue((int) (value*maxVolume()));
        AdjustIconVolume();
    }
    private float getVolume() {
        return sld_volume.getValue()/maxVolume();
    }
    private float maxVolume() {
        return sld_volume.getMaximum();
    }
    private float minVolume() {
        return sld_volume.getMinimum();
    }
    private void MutePlayer() {
        float value = getVolume();
        if (value == 0.0){
            if (prev_volume < 0){
                prev_volume = minVolume();
            }
            setVolume(prev_volume);
        }else{
            prev_volume = value;
            setVolume(minVolume());
        }
        AdjustIconVolume();
    }
    private void prg_timeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_prg_timeComponentShown
        // TODO add your handling code here:
        System.out.println("Estoy corriendo");
    }//GEN-LAST:event_prg_timeComponentShown

    private void btn_playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_playActionPerformed
        // TODO add your handling code here:
        if (pause == true){
            PlaySong();
        }else{
            PauseSong();
        }

        //JOptionPane.showMessageDialog(rootPane, name_song);
    }//GEN-LAST:event_btn_playActionPerformed

    private void btn_prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_prevActionPerformed
        // TODO add your handling code here:
        RestartSong();
    }//GEN-LAST:event_btn_prevActionPerformed

    private void btn_muteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_muteActionPerformed
        // TODO add your handling code here:
        MutePlayer();
    }//GEN-LAST:event_btn_muteActionPerformed

    private void sld_volumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sld_volumeStateChanged
        // TODO add your handling code here:
        setVolume(getVolume());
    }//GEN-LAST:event_sld_volumeStateChanged

    private void playListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playListMouseClicked
        PlayList now = (PlayList) this.playList.getSelectedValue();
        DefaultListModel listModel = new DefaultListModel();
        ArrayList<Music> musicArray = now.musicList;
        for (Music music : musicArray){
            listModel.addElement(music);
        }
        this.songsList.setModel(listModel);
    }//GEN-LAST:event_playListMouseClicked

    private void playSong(){
         new Thread() {
                public void run() {
                   try {
                      while (playSong) {
                         switch(actionOnSong){
                             case "continue":
                                 if (!currentSong.play(1)) {
                                    actionOnSong = "stop";
                                 }
                             case "pause" :
                                 break;
                             case "restart":
                                currentSong.close();
                                currentSong = new Player(copySong);
                                actionOnSong = "continue";
                                break;
                             case "stop":
                                 currentSong.close();
                                 playSong= false;
                                 break;
                             default:
                                 break;
                         }
                      }
                   } catch (JavaLayerException e) {
                      e.printStackTrace();
                   }
                }
             }.start();
    }
    
    private void getSong(int index) throws JavaLayerException, IOException, ClassNotFoundException, LineUnavailableException, UnsupportedAudioFileException{
            ShowButtons();
            this.playSong = false;
            if(currentSong != null) currentSong.close();   
//            this.prograssBar.setVisible(true);
            this.prograssBar.setIndeterminate(true);
//            this.prograssBar.
            Music music =(Music)this.songsList.getModel().getElementAt(index);
            this.currentIndex = index;
            //Play specific song
            InputStream song= Interface.controller.playSong(this,music);
            this.lbl_song_name.setText(music.title);
            this.lbl_song_artist_name.setText(music.artist);
            currentSong = new Player(song);
            copySong = song;
            actionOnSong = "continue";
            this.playSong = true;
            this.playSong();
//            this.getPlayNext(this.songsList.getSelectedIndex());
            this.prograssBar.setIndeterminate(false); 
            this.prograssBar.setString(null);
            this.prograssBar.setValue(this.prograssBar.getMinimum());
    }
    
    private int  getPlayNext(int selectedIndex) throws JavaLayerException, IOException, ClassNotFoundException, LineUnavailableException, UnsupportedAudioFileException {
            int index;
            int max = this.songsList.getModel().getSize();
            if (scramble){
                Random rand = new Random();
                 index = rand.nextInt(max); 
            }else{
                index = selectedIndex+1;
            }
            if (index >= max){
                if (again){
                    return 0;
                }else{
                    next = false;
                    return 0;
                }
            }
           return index ;
    }
    private void songsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songsListMouseClicked
        try {
           this.getSong(this.songsList.getSelectedIndex());
          } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JavaLayerException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_songsListMouseClicked

    private void btn_nextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_nextMouseClicked
        try {
            int index = this.getPlayNext(this.currentIndex);
            System.out.println("Index Next"+index);
            if(next){
               this.getSong(index);
            }
        } catch (JavaLayerException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_btn_nextMouseClicked

    private void repeatButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repeatButtonMouseClicked
        this.again = this.repeatButton.isSelected();
    }//GEN-LAST:event_repeatButtonMouseClicked

    private void scrambleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrambleButtonMouseClicked
        this.scramble = this.scrambleButton.isSelected();
    }//GEN-LAST:event_scrambleButtonMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        try {
            JFrame frame = new JFrame("InputDialog Example #1");
            // prompt the user to enter their name
            String name = JOptionPane.showInputDialog(frame, "New playList name?");
            if (name == null)return;
            PlayList newPlayList = Interface.controller.createPlayList(name);
            this.playListModel.addElement(newPlayList);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_jButton1MouseClicked

    private void allSongListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allSongListMouseClicked
        ShowButtons();
        Music music = (Music) this.allSongList.getSelectedValue();
        if (music !=  null ) this.selectedSong.setText(music.toString());
    }//GEN-LAST:event_allSongListMouseClicked

    private void UpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseClicked
        this.initSongData();
    }//GEN-LAST:event_UpdateMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        try {
            Music music =  (Music) this.allSongList.getSelectedValue();
            PlayList play = (PlayList) this.cbPlayList.getSelectedItem();
            if((music == null)|| (play == null)) return ;  
            String message = Interface.controller.matchMusicPlayList(music, play);
             JOptionPane.showMessageDialog(this,message);  
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void btn_playFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_playFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_playFocusGained

    private void btn_playMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_playMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_playMouseEntered

    private void repeatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_repeatButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        this.initSongData();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        new SwingBackgroupWorker().execute();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
                
            }
        });
    }

   

    
    
    
    
    public static class SwingBackgroupWorker extends SwingWorker<Object, Object> {
        @Override
        protected Object doInBackground() throws Exception {
            while (true) {
                System.out.println("working");
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        System.out.println("executed");
                        // here the swing update
                    }
                });
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Update;
    private javax.swing.JList allSongList;
    private javax.swing.JButton btn_mute;
    private javax.swing.JButton btn_next;
    private javax.swing.JButton btn_play;
    private javax.swing.JButton btn_prev;
    private javax.swing.JComboBox cbPlayList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_song_artist_name;
    private javax.swing.JLabel lbl_song_cover;
    private javax.swing.JLabel lbl_song_name;
    private javax.swing.JList playList;
    private javax.swing.JPanel pnl_panels;
    private javax.swing.JPanel pnl_panels_account;
    private javax.swing.JPanel pnl_panels_allSongs;
    private javax.swing.JPanel pnl_panels_myPlaylist;
    private javax.swing.JPanel pnl_song_info;
    private javax.swing.JPanel pnl_song_playing;
    private javax.swing.JProgressBar prg_time;
    private javax.swing.JProgressBar prograssBar;
    private javax.swing.JToggleButton repeatButton;
    private javax.swing.JToggleButton scrambleButton;
    private javax.swing.JTextField selectedSong;
    private javax.swing.JSlider sld_volume;
    private javax.swing.JList songsList;
    private javax.swing.JLabel userNameText;
    // End of variables declaration//GEN-END:variables
}
